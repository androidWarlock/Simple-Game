def rootConfiguration = rootProject.ext

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.0"
    defaultConfig {
        applicationId "com.example.simpleLanguage"
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "HOME_BASE_URL", "\"https://gist.githubusercontent.com/DroidCoder/7ac6cdb4bf5e032f4c737aaafe659b33/raw/baa9fe0d586082d85db71f346e2b039c580c5804/words.json/\""
        vectorDrawables.useSupportLibrary = true

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:${rootConfiguration.appcompatVersion}"
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation "androidx.constraintlayout:constraintlayout:${rootConfiguration.constraintLayoutVersion}"
    testImplementation "junit:junit:${rootConfiguration.jUnitVersion}"
    androidTestImplementation "androidx.test:runner:${rootConfiguration.androidXTestCoreVersion}"


    //Retrofit - Network calls
    implementation "com.squareup.retrofit2:adapter-rxjava2:${rootConfiguration.retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${rootConfiguration.retrofitVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${rootConfiguration.okhttpLoggingInterceptorVersion}"


    // Dagger - Dependency Injection
    implementation "com.google.dagger:dagger:${rootConfiguration.daggerVersion}"
    implementation "com.google.dagger:dagger-android:$rootConfiguration.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$rootConfiguration.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:${rootConfiguration.daggerVersion}"
    kapt "com.google.dagger:dagger-android-processor:$rootConfiguration.daggerVersion"


    //coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootConfiguration.coroutineVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootConfiguration.coroutineVersion"


    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$rootConfiguration.archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime:$rootConfiguration.archLifecycleVersion"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootConfiguration.archLifecycleVersion"
    kapt "androidx.lifecycle:lifecycle-compiler:$rootConfiguration.archLifecycleVersion"


    //RxAndroid
    implementation "io.reactivex.rxjava2:rxandroid:$rootConfiguration.rxAndroidVersion"
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    implementation "io.reactivex.rxjava2:rxjava:$rootConfiguration.rxJavaVersion"

    //Testing
    //coroutines tests
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$rootConfiguration.coroutineTestVersion"

    //androidX testing
    testImplementation "androidx.test:runner:$rootConfiguration.androidXTestCoreVersion"
    testImplementation "androidx.test:rules:$rootConfiguration.androidXTestCoreVersion"
    testImplementation "androidx.test:core:$rootConfiguration.androidXTestCoreVersion"
    testImplementation "androidx.test:core-ktx:$rootConfiguration.androidXTestCoreVersion"
    testImplementation "androidx.arch.core:core-testing:$rootConfiguration.testingCore"
    androidTestImplementation "androidx.test:core:$rootConfiguration.androidXTestCoreVersion"
    androidTestImplementation "androidx.test:core-ktx:$rootConfiguration.androidXTestCoreVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootConfiguration.androidJUnitVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$rootConfiguration.testingCore"

    //AndroidJUnitRunner and JUnit Rules
    testImplementation "junit:junit:$rootConfiguration.jUnitVersion"
    androidTestImplementation "androidx.test:runner:$rootConfiguration.androidXTestCoreVersion"
    androidTestImplementation "androidx.test:rules:$rootConfiguration.androidXTestCoreVersion"

    //Roboelectric
    testImplementation("org.robolectric:robolectric:$rootConfiguration.robolectricVersion") {
        exclude group: 'javax.inject'
    }

    //Mockito and Power mock
    testImplementation "org.mockito:mockito-core:${rootConfiguration.mockitoVersion}"
    testImplementation "org.powermock:powermock-api-mockito2:${rootConfiguration.powerMockVersion}"
    androidTestImplementation "org.powermock:powermock-api-mockito2:${rootConfiguration.powerMockVersion}"


    //Annotation, junit and espresso
    androidTestImplementation "androidx.annotation:annotation:$rootConfiguration.androidXTestAnnotationVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootConfiguration.androidJUnitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootConfiguration.expressoVersion"

}



